
# Color Coded Process Listing for CrossC2.
#
# Takes the PS output in CS and color codes all AV processes, explorer process, browsers processes, and current process running
#
# Based on the original ProcessColor.cna by @r3dQu1nn. (https://github.com/harleyQu1nn/AggressorScripts/blob/master/ProcessColor.cna)
#
# Author:
#   hooooooooooook
#   (https://github.com/gloxec/CrossC2)
#

global('@av @av1 @edr @admin @login @browsers');
#av 1
    @av = @("SecurityHealthService", "Tanium", "360RP", "360SD", "360Safe", "360leakfixer", "360rp", "360safe", "360sd", "360tray", "AAWTray", "ACAAS", "ACAEGMgr", "ACAIS", "AClntUsr", "ALERT", "ALERTSVC", "ALMon", "ALUNotify", "ALUpdate", "ALsvc", "AVENGINE", "AVGCHSVX", "AVGCSRVX", "AVGIDSAgent", "AVGIDSMonitor", "AVGIDSUI", "AVGIDSWatcher", "AVGNSX", "AVKProxy", "AVKService", "AVKTray", "AVKWCtl", "AVP", "AVP", "AVPDTAgt", "AcctMgr", "Ad-Aware", "Ad-Aware2007", "AddressExport", "AdminServer", "Administrator", "AeXAgentUIHost", "AeXNSAgent", "AeXNSRcvSvc", "AlertSvc", "AlogServ", "AluSchedulerSvc", "AnVir", "AppSvc32", "AtrsHost", "Auth8021x", "AvastSvc", "AvastUI", "Avconsol", "AvpM", "Avsynmgr", "Avtask", "BLACKD", "BWMeterConSvc", "CAAntiSpyware", "CALogDump", "CAPPActiveProtection", "CAPPActiveProtection", "CB", "CCAP", "CCenter", "CClaw", "CLPS", "CLPSLA", "CLPSLS", "CNTAoSMgr", "CPntSrv", "CTDataLoad", "CertificationManagerServiceNT", "ClShield", "ClamTray", "ClamWin", "Console", "CylanceUI", "DAO_Log", "DLService", "DLTray", "DLTray", "DRWAGNTD", "DRWAGNUI", "DRWEB32W", "DRWEBSCD", "DRWEBUPW", "DRWINST", "DSMain", "DWHWizrd", "DefWatch", "DolphinCharge", "EHttpSrv", "EMET_Agent", "EMET_Service", "EMLPROUI", "EMLPROXY", "EMLibUpdateAgentNT", "ETConsole3", "ETCorrel", "ETLogAnalyzer", "ETReporter", "ETRssFeeds", "EUQMonitor", "EndPointSecurity", "EngineServer", "EntityMain", "EtScheduler", "EtwControlPanel", "EventParser", "FAMEH32", "FCDBLog", "FCH32", "FPAVServer", "FProtTray", "FSCUIF", "FSHDLL32", "FSM32", "FSMA32", "FSMB32", "FWCfg", "FireSvc", "FireTray", "FirewallGUI", "ForceField", "FortiProxy", "FortiTray", "FortiWF", "FrameworkService", "FreeProxy", "GDFirewallTray", "GDFwSvc", "HWAPI", "ISNTSysMonitor", "ISSVC", "ISWMGR", "ITMRTSVC", "ITMRT_SupportDiagnostics", "ITMRT_TRACE", "IcePack", "IdsInst", "InoNmSrv", "InoRT", "InoRpc", "InoTask", "InoWeb", "IsntSmtp", "KABackReport", "KANMCMain", "KAVFS", "KAVStart", "KLNAGENT", "KMailMon", "KNUpdateMain", "KPFWSvc", "KSWebShield", "KVMonXP", "KVMonXP_2", "KVSrvXP", "KWSProd", "KWatch", "KavAdapterExe", "KeyPass", "KvXP", "LUALL", "LWDMServer", "LockApp", "LockAppHost", "LogGetor", "MCSHIELD", "MCUI32", "MSASCui", "ManagementAgentNT", "McAfeeDataBackup", "McEPOC", "McEPOCfg", "McNASvc", "McProxy", "McScript_InUse", "McWCE", "McWCECfg", "Mcshield", "Mctray", "MgntSvc", "MpCmdRun", "MpfAgent", "MpfSrv", "MsMpEng", "NAIlgpip", "NAVAPSVC", "NAVAPW32", "NCDaemon", "NIP", "NJeeves", "NLClient", "NMAGENT", "NOD32view", "NPFMSG", "NPROTECT", "NRMENCTB", "NSMdtr", "NTRtScan", "NVCOAS", "NVCSched", "NavShcom", "Navapsvc", "NaveCtrl", "NaveLog", "NaveSP", "Navw32", "Navwnt", "Nip", "Njeeves", "Npfmsg2", "Npfsvice", "NscTop", "Nvcoas", "Nvcsched", "Nymse", "OLFSNT40", "OMSLogManager", "ONLINENT", "ONLNSVC", "OfcPfwSvc", "PASystemTray", "PAVFNSVR", "PAVSRV51", "PNmSrv", "POPROXY", "POProxy", "PPClean", "PPCtlPriv", "PQIBrowser", "PSHost", "PSIMSVC", "PXEMTFTP", "PadFSvr", "Pagent", "Pagentwd", "PavBckPT", "PavFnSvr", "PavPrSrv", "PavProt", "PavReport", "Pavkre", "PcCtlCom", "PcScnSrv", "PccNTMon", "PccNTUpd", "PpPpWallRun", "PrintDevice", "ProUtil", "PsCtrlS", "PsImSvc", "PwdFiltHelp", "Qoeloader", "RAVMOND", "RAVXP", "RNReport", "RPCServ", "RSSensor", "RTVscan", "RapApp", "Rav", "RavAlert", "RavMon", "RavMonD", "RavService", "RavStub", "RavTask", "RavTray", "RavUpdate", "RavXP", "RealMon", "Realmon", "RedirSvc", "RegMech", "ReporterSvc", "RouterNT", "Rtvscan", "SAFeService", "SAService", "SAVAdminService", "SAVFMSESp", "SAVMain", "SAVScan", "SCANMSG", "SCANWSCS", "SCFManager", "SCFService", "SCFTray", "SDTrayApp", "SEVINST", "SMEX_ActiveUpdate", "SMEX_Master", "SMEX_RemoteConf", "SMEX_SystemWatch", "SMSECtrl", "SMSELog", "SMSESJM", "SMSESp", "SMSESrv", "SMSETask", "SMSEUI", "SNAC", "SNAC", "SNDMon", "SNDSrvc", "SPBBCSvc", "SPIDERML", "SPIDERNT", "SSM", "SSScheduler", "SVCharge", "SVDealer", "SVFrame", "SVTray", "SWNETSUP", "SavRoam", "SavService", "SavUI", "ScanMailOutLook", "SeAnalyzerTool", "SemSvc", "SescLU", "SetupGUIMngr", "SiteAdv", "Smc", "SmcGui", "SnHwSrv", "SnICheckAdm", "SnIcon", "SnSrv", "SnicheckSrv", "SpIDerAgent", "SpntSvc", "SpyEmergency", "SpyEmergencySrv", "StOPP", "StWatchDog", "SymCorpUI", "SymSPort", "TBMon", "TFGui", "TFService", "TFTray", "TFun", "TIASPN~1", "TSAnSrf", "TSAtiSy", "TScutyNT", "TSmpNT", "TmListen", "TmPfw", "Tmntsrv", "Traflnsp", "TrapTrackerMgr", "UPSCHD", "UcService", "UdaterUI", "UmxAgent", "UmxCfg", "UmxFwHlp", "UmxPol", "Up2date", "UpdaterUI", "UrlLstCk", "UserActivity", "UserAnalysis", "UsrPrmpt", "V3Medic", "V3Svc", "VPC32", "VPDN_LU", "VPTray", "VSStat", "VsStat", "VsTskMgr", "WEBPROXY", "WFXCTL32", "WFXMOD32", "WFXSNT40", "WebProxy", "WebScanX", "WinRoute", "WrSpySetup", "ZLH", "Zanda", "ZhuDongFangYu", "Zlh", "_avp32", "_avpcc", "_avpm", "aAvgApi", "aawservice", "acaif", "acctmgr", "ackwin32", "aclient", "adaware", "advxdwin", "aexnsagent", "aexsvc", "aexswdusr", "aflogvw", "afwServ", "agentsvr", "agentw", "ahnrpt", "ahnsd", "ahnsdsv", "alertsvc", "alevir", "alogserv", "alsvc", "alunotify", "aluschedulersvc", "amon9x", "amswmagt", "anti-trojan", "antiarp", "antivirus", "ants", "aphost", "apimonitor", "aplica32", "aps", "apvxdwin", "arr", "ashAvast", "ashBug", "ashChest", "ashCmd", "ashDisp", "ashEnhcd", "ashLogV", "ashMaiSv", "ashPopWz", "ashQuick", "ashServ", "ashSimp2", "ashSimpl", "ashSkPcc", "ashSkPck", "ashUpd", "ashWebSv", "ashdisp", "ashmaisv", "ashserv", "ashwebsv", "asupport", "aswDisp", "aswRegSvr", "aswServ", "aswUpdSv", "aswUpdsv", "aswWebSv", "aswupdsv", "atcon", "atguard", "atro55en", "atupdater", "atwatch", "atwsctsk", "au", "aupdate", "aupdrun", "aus", "auto-protect.nav80try", "autodown", "autotrace", "autoup", "autoupdate", "avEngine", "avadmin", "avcenter", "avconfig", "avconsol", "ave32", "avengine", "avesvc", "avfwsvc", "avgam", "avgamsvr", "avgas", "avgcc", "avgcc32", "avgcsrvx", "avgctrl", "avgdiag", "avgemc", "avgfws8", "avgfws9", "avgfwsrv", "avginet", "avgmsvr", "avgnsx", "avgnt", "avgregcl", "avgrssvc", "avgrsx", "avgscanx", "avgserv", "avgserv9", "avgsystx", "avgtray", "avguard", "avgui", "avgupd", "avgupdln", "avgupsvc", "avgvv", "avgw", "avgwb", "avgwdsvc", "avgwizfw", "avkpop", "avkserv", "avkservice", "avkwctl9", "avltmain", "avmailc", "avmcdlg", "avnotify", "avnt", "avp", "avp32", "avpcc", "avpdos32", "avpexec", "avpm", "avpncc", "avps", "avptc32", "avpupd", "avscan", "avsched32", "avserver", "avshadow", "avsynmgr", "avwebgrd", "avwin", "avwin95", "avwinnt", "avwupd", "avwupd32", "avwupsrv", "avxmonitor9x", "avxmonitornt", "avxquar", "backweb", "bargains", "basfipm", "bd_professional", "bdagent", "bdc", "bdlite", "bdmcon", "bdss", "bdsubmit", "beagle", "belt", "bidef", "bidserver", "bipcp", "bipcpevalsetup", "bisp", "blackd", "blackice", "blink", "blss", "bmrt", "bootconf", "bootwarn", "borg2", "bpc", "bpk", "brasil", "bs120", "bundle", "bvt", "bwgo0000", "ca", "caav", "caavcmdscan", "caavguiscan", "caf", "cafw", "caissdt", "capfaem", "capfasem", "capfsem", "capmuamagt", "casc", "casecuritycenter", "caunst", "cavrep", "cavrid", "cavscan", "cavtray", "ccApp", "ccEvtMgr", "ccLgView", "ccProxy", "ccSetMgr", "ccSetmgr", "ccSvcHst", "ccap", "ccapp", "ccevtmgr", "cclaw", "ccnfagent", "ccprovsp", "ccproxy", "ccpxysvc", "ccschedulersvc", "ccsetmgr", "ccsmagtd", "ccsvchst", "ccsystemreport", "cctray", "ccupdate", "cdp", "cfd", "cfftplugin", "cfgwiz", "cfiadmin", "cfiaudit", "cfinet", "cfinet32", "cfnotsrvd", "cfp", "cfpconfg", "cfpconfig", "cfplogvw", "cfpsbmit", "cfpupdat", "cfsmsmd", "checkup", "cka", "clamscan", "claw95", "claw95cf", "clean", "cleaner", "cleaner3", "cleanpc", "cleanup", "click", "cmdagent", "cmdinstall", "cmesys", "cmgrdian", "cmon016", "comHost", "connectionmonitor", "control_panel", "cpd", "cpdclnt", "cpf", "cpf9x206", "cpfnt206", "crashrep", "csacontrol", "csinject", "csinsm32", "csinsmnt", "csrss_tc", "ctrl", "cv", "cwnb181", "cwntdwmo", "cz", "datemanager", "dbserv", "dbsrv9", "dcomx", "defalert", "defscangui", "defwatch", "deloeminfs", "deputy", "diskmon", "divx", "djsnetcn", "dllcache", "dllreg", "doors", "doscan", "dpf", "dpfsetup", "dpps2", "drwagntd", "drwatson", "drweb", "drweb32", "drweb32w", "drweb386", "drwebcgp", "drwebcom", "drwebdc", "drwebmng", "drwebscd", "drwebupw", "drwebwcl", "drwebwin", "drwupgrade", "dsmain", "dssagent", "dvp95", "dvp95_0", "dwengine", "dwhwizrd", "dwwin", "ecengine", "edisk", "efpeadm", "egui", "ekrn", "elogsvc", "emet_agent", "emet_service", "emsw", "engineserver", "ent", "era", "esafe", "escanhnt", "escanv95", "esecagntservice", "esecservice", "esmagent", "espwatch", "etagent", "ethereal", "etrustcipe", "evpn", "evtProcessEcFile", "evtarmgr", "evtmgr", "exantivirus-cnet", "exe.avxw", "execstat", "expert", "explore", "f-agnt95", "f-prot", "f-prot95", "f-stopw", "fameh32", "fast", "fch32", "fih32", "findviru", "firesvc", "firetray", "firewall", "fmon", "fnrb32", "fortifw", "fp-win", "fp-win_trial", "fprot", "frameworkservice", "frminst", "frw", "fsaa", "fsaua", "fsav", "fsav32", "fsav530stbyb", "fsav530wtbyb", "fsav95", "fsavgui", "fscuif", "fsdfwd", "fsgk32", "fsgk32st", "fsguidll", "fsguiexe", "fshdll32", "fsm32", "fsma32", "fsmb32", "fsorsp", "fspc", "fspex", "fsqh", "fssm32", "fwinst", "gator", "gbmenu", "gbpoll", "gcascleaner", "gcasdtserv", "gcasinstallhelper", "gcasnotice", "gcasserv", "gcasservalert", "gcasswupdater", "generics", "gfireporterservice", "ghost_2", "ghosttray", "giantantispywaremain", "giantantispywareupdater", "gmt", "guard", "guarddog", "guardgui", "hacktracersetup", "hbinst", "hbsrv", "hipsvc", "hotactio", "hotpatch", "htlog", "htpatch", "hwpe", "hxdl", "hxiul", "iamapp", "iamserv", "iamstats", "ibmasn", "ibmavsp", "icepack", "icload95", "icloadnt", "icmon", "icsupp95", "icsuppnt", "idle", "iedll", "iedriver", "iface", "ifw2000", "igateway", "inetlnfo", "infus", "infwin", "inicio", "inonmsrv", "inorpc", "inort", "inotask", "intdel", "intren", "iomon98", "isPwdSvc", "isUAC", "isafe", "isafinst", "issvc", "istsvc", "jammer", "jdbgmrg", "jedi", "kaccore", "kansgui", "kansvr", "kastray", "kav", "kav32", "kavfs", "kavfsgt", "kavfsrcn", "kavfsscs", "kavfswp", "kavisarv", "kavlite40eng", "kavlotsingleton", "kavmm", "kavpers40eng", "kavpf", "kavshell", "kavss", "kavstart", "kavsvc", "kavtray", "kazza", "keenvalue", "kerio-pf-213-en-win", "kerio-wrl-421-en-win", "kerio-wrp-421-en-win", "kernel32", "killprocesssetup161", "kis", "kislive", "kissvc", "klnacserver", "klnagent", "klserver", "klswd", "klwtblfs", "kmailmon", "knownsvr", "kpf4gui", "kpf4ss", "kpfw32", "kpfwsvc", "krbcc32s", "kvdetech", "kvolself", "kvsrvxp", "kvsrvxp_1", "kwatch", "kwsprod", "kxeserv", "launcher", "ldnetmon", "ldpro", "ldpromenu", "ldscan", "leventmgr", "livesrv", "lmon", "lnetinfo", "loader", "localnet", "lockdown", "lockdown2000", "log_qtine", "lookout", "lordpe", "lsetup", "luall", "luau", "lucallbackproxy", "lucoms", "lucomserver", "lucoms~1", "luinit", "luspt", "makereport", "mantispm", "mapisvc32", "masalert", "massrv", "mcafeefire", "mcagent", "mcappins", "mcconsol", "mcdash", "mcdetect", "mcepoc", "mcepocfg", "mcinfo", "mcmnhdlr", "mcmscsvc", "mcods", "mcpalmcfg", "mcpromgr", "mcregwiz", "mcscript", "mcscript_inuse", "mcshell", "mcshield", "mcshld9x", "mcsysmon", "mctool", "mctray", "mctskshd", "mcuimgr", "mcupdate", "mcupdmgr", "mcvsftsn", "mcvsrte", "mcvsshld", "mcwce", "mcwcecfg", "md", "mfeann", "mfevtps", "mfin32", "mfw2en", "mfweng3.02d30", "mgavrtcl", "mgavrte", "mghtml", "mgui", "minilog", "mmod", "monitor", "monsvcnt", "monsysnt", "moolive", "mostat", "mpcmdrun", "mpf", "mpfagent", "mpfconsole", "mpfservice", "mpftray", "mps", "mpsevh", "mpsvc", "mrf", "mrflux", "msapp", "msascui", "msbb", "msblast", "mscache", "msccn32", "mscifapp", "mscman", "msconfig", "msdm", "msdos", "msiexec16", "mskagent", "mskdetct", "msksrver", "msksrvr", "mslaugh", "msmgt", "msmpeng", "msmsgri32", "msscli", "msseces", "mssmmc32", "msssrv", "mssys", "msvxd", "mu0311ad", "mwatch", "myagttry", "n32scanw", "nSMDemf", "nSMDmon", "nSMDreal", "nSMDsch", "naPrdMgr", "nav", "navap.navapsvc", "navapsvc", "navapw32", "navdx", "navlu32", "navnt", "navstub", "navw32", "navwnt", "nc2000", "ncinst4");

#av 2
    @av1 = @("MSASCuiL", "CylanceSvc", "ndd32", "ndetect", "neomonitor", "neotrace", "neowatchlog", "netalertclient", "netarmor", "netcfg", "netd32", "netinfo", "netmon", "netscanpro", "netspyhunter-1.2", "netstat", "netutils", "networx", "ngctw32", "ngserver", "nip", "nipsvc", "nisoptui", "nisserv", "nisum", "njeeves", "nlsvc", "nmain", "nod32", "nod32krn", "nod32kui", "normist", "norton_internet_secu_3.0_407", "notstart", "npf40_tw_98_nt_me_2k", "npfmessenger", "npfmntor", "npfmsg", "nprotect", "npscheck", "npssvc", "nrmenctb", "nsched32", "nscsrvce", "nsctop", "nsmdtr", "nssys32", "nstask32", "nsupdate", "nt", "ntcaagent", "ntcadaemon", "ntcaservice", "ntrtscan", "ntvdm", "ntxconfig", "nui", "nupgrade", "nvarch16", "nvc95", "nvcoas", "nvcsched", "nvsvc32", "nwinst4", "nwservice", "nwtool16", "nymse", "oasclnt", "oespamtest", "ofcdog", "ofcpfwsvc", "okclient", "olfsnt40", "ollydbg", "onsrvr", "op_viewer", "opscan", "optimize", "ostronet", "otfix", "outpost", "outpostinstall", "outpostproinstall", "paamsrv", "padmin", "pagent", "pagentwd", "panixk", "patch", "pavbckpt", "pavcl", "pavfires", "pavfnsvr", "pavjobs", "pavkre", "pavmail", "pavprot", "pavproxy", "pavprsrv", "pavsched", "pavsrv50", "pavsrv51", "pavsrv52", "pavupg", "pavw", "pccNT", "pccclient", "pccguide", "pcclient", "pccnt", "pccntmon", "pccntupd", "pccpfw", "pcctlcom", "pccwin98", "pcfwallicon", "pcip10117_0", "pcscan", "pctsAuxs", "pctsGui", "pctsSvc", "pctsTray", "pdsetup", "pep", "periscope", "persfw", "perswf", "pf2", "pfwadmin", "pgmonitr", "pingscan", "platin", "pmon", "pnmsrv", "pntiomon", "pop3pack", "pop3trap", "poproxy", "popscan", "portdetective", "portmonitor", "powerscan", "ppinupdt", "ppmcativedetection", "pptbc", "ppvstop", "pqibrowser", "pqv2isvc", "prevsrv", "prizesurfer", "prmt", "prmvr", "programauditor", "proport", "protectx", "psctris", "psh_svc", "psimreal", "psimsvc", "pskmssvc", "pspf", "purge", "pview", "pviewer", "pxemtftp", "pxeservice", "qclean", "qconsole", "qdcsfs", "qoeloader", "qserver", "rapapp", "rapuisvc", "ras", "rasupd", "rav7", "rav7win", "rav8win32eng", "ravmon", "ravmond", "ravstub", "ravxp", "ray", "rb32", "rcsvcmon", "rcsync", "realmon", "reged", "remupd", "reportsvc", "rescue", "rescue32", "rfwmain", "rfwproxy", "rfwsrv", "rfwstub", "rnav", "rrguard", "rshell", "rsnetsvr", "rstray", "rtvscan", "rtvscn95", "rulaunch", "saHookMain", "safeboxtray", "safeweb", "sahagentscan32", "sav32cli", "save", "savenow", "savroam", "savscan", "savservice", "sbserv", "scam32", "scan32", "scan95", "scanexplicit", "scanfrm", "scanmailoutlook", "scanpm", "schdsrvc", "schupd", "scrscan", "seestat", "serv95", "setloadorder", "setup_flowprotector_us", "setupguimngr", "setupvameeval", "sfc", "sgssfw32", "shellspyinstall", "shn", "showbehind", "shstat", "siteadv", "smOutlookPack", "smc", "smoutlookpack", "sms", "smsesp", "smss32", "sndmon", "sndsrvc", "soap", "sofi", "softManager", "spbbcsvc", "spf", "sphinx", "spideragent", "spiderml", "spidernt", "spiderui", "spntsvc", "spoler", "spoolcv", "spoolsv32", "spyxx", "srexe", "srng", "srvload", "srvmon", "ss3edit", "sschk", "ssg_4104", "ssgrate", "st2", "stcloader", "stinger", "stopp", "stwatchdog", "supftrl", "support", "supporter5", "svcGenericHost", "svcharge", "svchostc", "svchosts", "svcntaux", "svdealer", "svframe", "svtray", "swdsvc", "sweep95", "sweepnet.sweepsrv.swnetsup", "sweepsrv", "swnetsup", "swnxt", "swserver", "symlcsvc", "symproxysvc", "symsport", "symtray", "symwsc", "sysdoc32", "sysedit", "sysupd", "taskmo", "taumon", "tbmon", "tbscan", "tc", "tca", "tclproc", "tcm", "tdimon", "tds-3", "tds2-98", "tds2-nt", "teekids", "tfak", "tfak5", "tgbob", "titanin", "titaninxp", "tmas", "tmlisten", "tmntsrv", "tmpfw", "tmproxy", "tnbutil", "tpsrv", "tracesweeper", "trickler", "trjscan", "trjsetup", "trojantrap3", "trupd", "tsadbot", "tvmd", "tvtmd", "udaterui", "undoboot", "unvet32", "updat", "updtnv28", "upfile", "upgrad", "uplive", "urllstck", "usergate", "usrprmpt", "utpost", "v2iconsole", "v3clnsrv", "v3exec", "v3imscn", "vbcmserv", "vbcons", "vbust", "vbwin9x", "vbwinntw", "vcsetup", "vet32", "vet95", "vetmsg", "vettray", "vfsetup", "vir-help", "virusmdpersonalfirewall", "vnlan300", "vnpc3000", "vpatch", "vpc32", "vpc42", "vpfw30s", "vprosvc", "vptray", "vrv", "vrvmail", "vrvmon", "vrvnet", "vscan40", "vscenu6.02d30", "vsched", "vsecomr", "vshwin32", "vsisetup", "vsmain", "vsmon", "vsserv", "vsstat", "vstskmgr", "vswin9xe", "vswinntse", "vswinperse", "w32dsm89", "w9x", "watchdog", "webdav", "webproxy", "webscanx", "webtrap", "webtrapnt", "wfindv32", "wfxctl32", "wfxmod32", "wfxsnt40", "whoswatchingme", "wimmun32", "win-bugsfix", "winactive", "winmain", "winnet", "winppr32", "winrecon", "winroute", "winservn", "winssk32", "winstart", "winstart001", "wintsk32", "winupdate", "wkufind", "wnad", "wnt", "wradmin", "wrctrl", "wsbgate", "wssfcmai", "wupdater", "wupdt", "wyvernworksfirewall", "xagt", "xagtnotif", "xcommsvr", "xfilter", "xpf202en", "zanda", "zapro", "zapsetup3001", "zatutor", "zhudongfangyu", "zlclient", "zlh", "zonalm2601", "zonealarm");

#edr 
    @edr = @("CiscoAMPCEFWDriver", "CiscoAMPHeurDriver", "cbstream", "cbk7", "Parity", "libwamf", "LRAgentMF", "BrCow_x_x_x_x", "brfilter", "BDSandBox", "TRUFOS", "AVC3", "Atc", "AVCKF", "bddevflt", "gzflt", "bdsvm", "hbflt", "cve", "psepfilter", "cposfw", "dsfa", "medlpflt", "epregflt", "TmFileEncDmk", "tmevtmgr", "TmEsFlt", "fileflt", "SakMFile", "SakFile", "AcDriver", "TMUMH", "hfileflt", "TMUMS", "MfeEEFF", "mfprom", "hdlpflt", "swin", "mfehidk", "mfencoas", "epdrv", "carbonblackk", "csacentr", "csaenh", "csareg", "csascr", "csaav", "csaam", "esensor", "fsgk", "fsatp", "fshs", "eaw", "im", "csagent", "rvsavd", "dgdmk", "atrsdfw", "mbamwatchdog", "edevmon", "SentinelMonitor", "edrsensor", "ehdrv", "HexisFSMonitor", "CyOptics", "CarbonBlackK", "CyProtectDrv32", "CyProtectDrv64", "CRExecPrev", "ssfmonm", "CybKernelTracker", "SAVOnAccess", "savonaccess", "sld", "aswSP", "FeKern", "klifks", "klifaa", "Klifsm", "mfeaskm", "mfencfilter", "WFP_MRT", "groundling32", "SAFE-Agent", "groundling64", "avgtpx86", "avgtpx64", "pgpwdefs", "GEProtection", "diflt", "sysMon", "ssrfsf", "emxdrv2", "reghook", "spbbcdrv", "bhdrvx86", "bhdrvx64", "SISIPSFileFilter", "symevent", "VirtualAgent", "vxfsrep", "VirtFile", "SymAFR", "symefasi", "symefa", "symefa64", "SymHsm", "evmf", "GEFCMP", "VFSEnc", "pgpfs", "fencry", "symrg", "cfrmd", "cmdccav", "cmdguard", "CmdMnEfs", "MyDLPMF", "PSINPROC", "PSINFILE", "amfsm", "amm8660", "amm6460");
@admin = @("ssh", "zabbix_agentd", "zabbix_server", "vim", "top", "nc", "vnc", "telnet");
@login = @("sshd", "lightdm", "gnome-keyring-daemon", "gdm-password", "vsftpd", "apache2");
@browsers = @("chrome", "chromuim", "firefox", "safari");


sub lcarray {
    @array = $1;
    foreach $index => $value(@array) {
        @array[$index] = lc($value);
    }
    return @array;
}

sub format_ps{
    global('@av @av1 @edr @admin @login @browsers');
    $bid = $1;
    $bd = bdata($1);
    $computer = beacon_info($1, "computer");
    $si = indexOf($computer, "(");
    $si = $si + 1;
    $ei = indexOf($computer, ")");
    $realpid = substr($computer, $si, $ei);

    @format_av = map({ return lc(mid($1, 0, 15)); }, @av);
    @format_av1 = map({ return lc(mid($1, 0, 15)); }, @av1);
    @format_edr = map({ return lc(mid($1, 0, 15)); }, @edr);
    @format_admin = map({ return lc(mid($1, 0, 15)); }, @admin);
    @format_login = map({ return lc(mid($1, 0, 15)); }, @login);

    # @av = lcarray(@av);
    # @av1 = lcarray(@av1);
    # @admin = lcarray(@admin);

    global('@ps @final_ps @reverse_ps @temp_ps');
    local('$outps $temp $name $ppid $pid $arch $user $session');
    $outps .= "\cC[*]\o Process List with process highlighting\n";
    $outps .= "\cC[*]\o Current Running PID: \c8 Yellow ". $realpid ." \o \n";
    $outps .= "\cC[*]\o Explorer/Winlogon: \c2 BLUE \o \n";
    $outps .= "\cC[*]\o Admin Tools: \cB LIGHT BLUE \o \n";
    $outps .= "\cC[*]\o Browsers: \c3 GREEN \o \n";
    $outps .= "\cC[*]\o AV/EDR: \c4 RED \o \n\n";
    $outps .= " PID   PPID  Name                                   User  TTY         Path\n";
    $outps .= "\cE ---   ----  ----                                   ----  -------     ----\n";

    foreach $temp (split("\n", ["$2" trim])) {
        ($name, $ppid, $pid, $arch, $user, $session) = split("\t", $temp);
        $name = substr($name, 1, lindexOf($name, ")"));
        @tempLine = @(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\c4", name => $name, arch => "$[5]arch", session => "$[11]session", user => $user);

        
        $lname = lc($name);

        # highlight current process in YELLOW
        if ($pid == $realpid) {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\c8", name => $name.' (beacon)', arch => "$[5]arch", session => "$[11]session", user => $user));
        } 

        # highlight AV processes in RED.
        else if(iff($lname in @format_av,true,false)) {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\c4", name => $name.' (AV)', arch => "$[5]arch", session => "$[11]session", user => $user));
        } 
        
        # highlight AV processes in RED.
        else if (iff($lname in @format_av1,true,false)) {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\c4", name => $name.' (AV)', arch => "$[5]arch", session => "$[11]session", user => $user));
        }

        else if (iff($lname in @format_edr,true,false)) {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\c4", name => $name.' (EDR)', arch => "$[5]arch", session => "$[11]session", user => $user));
        }

        # highlight explorer , winlogon in BLUE 
        # map({ return "$1 :)"; }, @array);
        # else if (iff($lname in @login,true,false)) {
        else if (iff($lname in @format_login,true,false)) {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\c2", name => $name.' (dump password)', arch => "$[5]arch", session => "$[11]session", user => $user));
        } 
        
        # highlight browsers processes in GREEN
        else if (iff($lname in @browsers,true,false)) {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\c3", name => $name, arch => "$[5]arch", session => "$[11]session", user => $user));
        } 

        # highlight Admin Tools in Light Blue
        # Arsenii: small bug fix to not include if this is our beacon PID
        else if(iff($lname in @format_admin && $pid != $realpid,true,false)) {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "\cB", name => $name.' (tools)', arch => "$[5]arch", session => "$[11]session", user => $user));
        }

        else {
            push(@ps, %(pid => $pid, ppid => $ppid, pid_formatted => "$[5]pid", ppid_formatted => "$[5]ppid", color => "", name => $name, arch => "$[5]arch", session => "$[11]session", user => $user));
        }
    }
        # sort the processes please
    sort({ return $1['pid'] <=> $2['pid']; }, @ps);

    # get the @ps array in a reverse order for the ascending child sorting order
    @reverse_ps = reverse(@ps);


    # this function will find all orphan processes and add them to the final_ps. Those will be in the root of the process tree
    sub buildOrphanage{
        for ($counter4 = 0; $counter4 < size($1); $counter4++){
            $orphan = true;

            for ($counter5 = 0; $counter5 < size($1); $counter5++){
                if ($1[$counter4]['ppid'] == $1[$counter5]['pid']){
                    $orphan = false;
                    break;
                }
            }

            # PID zero - its gotta be an orphan, poor kid
            if ($1[$counter4]['pid'] == 0){
                $orphan = true;
            }


            if ($orphan == true){
                #set indentation and push to the @final_ps
                $1[$counter4]['indent'] = "";
                push($2, $1[$counter4]);
            }
        }
    }

    # finds an index of a given PID in the array
    sub findArrayElement{
        foreach $index => $value ($1){
            if ($1[$index]['pid'] == $2){
                return $index;
            }
        }
        return $null;
    }

    # adds parent and  all of its children to a temp_ps which then being copied into a final_ps
    sub addChildrenProcesses{       
        # for every parent in the current final_ps
        foreach $parent ($2){

            # check if that parent is already there
            $arrayIndex = findArrayElement($1, $parent['pid']);

            # if the parent is not there - add it first
            if ($arrayIndex == $null){
                #add the parent first 
                push($1, $parent);

                # update arrayIndex for children to follow
                $arrayIndex = size($1) - 1;
            }

            #now find all the children of the process and insert those right under the parent
            foreach $potentialChild ($3){
                if ($potentialChild['ppid'] ==  $parent['pid'] &&  $potentialChild['ppid'] != $potentialChild['pid']){
                    $potentialChild['indent'] = $parent['indent'] . "  ";
                    add($1, $potentialChild, $arrayIndex + 1);
                }
            }
        }
        # update @final_ps
        $2 = copy($1);
        # clear temp_ps
        clear($1);
    }

    buildOrphanage(@ps, @final_ps);

    # until @final_ps is not going to be the same size as @ps, keep adding children
    # WARNING: if something doesnt work correctly (variable scope??) this will create an infinite loop with Cobalt Strike hanging itself
    while (size(@final_ps) < size(@ps)){
        addChildrenProcesses(@temp_ps, @final_ps, @reverse_ps);
        $final_ps_size = size(@final_ps);
    }


    # in case of an infinite loop, this can be used to debug
    # for ($counter1 = 0; $counter1 < 10; $counter1++){
    #   addChildrenProcesses(@temp_ps, @final_ps, @reverse_ps);

    # }

    # append to our outstring
    foreach $temp (@final_ps) {
        # for some reason this was the best way to format that string
        $temp_name = $temp['indent'] . $temp['name'];

        # $outps .= "$temp['color'] $temp['pid_formatted'] $temp['ppid_formatted'] $[38]temp_name $temp['arch'] $temp['session'] $temp['user']\o\n";
        $outps .= "$temp['color'] $temp['pid_formatted'] $temp['ppid_formatted'] $[38]temp_name $temp['user'] $temp['session'] $temp['arch']\o\n";
    }

    # clear these arrays since for some reason they persist after each aggressor script run
    clear(@final_ps);
    clear(@ps);

    blog($bid, $outps);
}

ssh_alias ps {
    bps($1, &format_ps);
}