
#include(script_resource("CrossC2Kit.cna"));

sub printUsage_jobs {
    blog($1, "\nUsage: cc2_job <list/kill> (PID/all)\n\tcc2_job list\n\tcc2_job kill 222\n\tcc2_job kill all\n");
}

sub cc2_job {
    $taskName = "cc2_job"; # taskName
    $taskType = "so";  # $taskType -> ELF, MachO, so, dylib
    $taskResType = "info"; # info -> normal message

    $beaconid = $1;
    $jobType = $2;
    $optionalPID = $3;
    $transportArg = $jobType . "^" . $optionalPID;
    $arch = beacon_info($beaconid, "arch");
    $os = lc(beacon_info($beaconid, "os"));
    if ('linux' isin $os) {
        if ($arch eq 'x86') {
            $loadlib = "jobs/cc2_jobs32.so";
        } else if ($arch eq 'x64') {
            $loadlib = "jobs/cc2_jobs.so";
        }
    } else if ('macos' isin $os) {
        $loadlib = "jobs/cc2_jobs.dylib";
    } else {
        berror($beaconid, "*[error]: system $os ");
        printUsage_jobs($beaconid);
    }

    if ($jobType) {
        if ($jobType eq "kill") {
            if ($optionalPID eq $null) {
                berror($beaconid, "*[error]: PID");
                printUsage_jobs($beaconid);
                return 0;
            }
        } else if ($jobType ne "list") {
            berror($beaconid, "*[error]: function type");
            printUsage_jobs($beaconid);
            return;
        }
        binput($beaconid, "cc2_job $jobType $optionalPID");
        bcrossc2_load_dyn($beaconid, $taskType, $taskName, $taskResType, $loadlib, $transportArg);
    } else {
        berror($beaconid, "*[error]: job type");
        printUsage_jobs($beaconid);
    }
}

ssh_alias("cc2_job", &cc2_job);

ssh_command_register("cc2_job", "CrossC2 joblist - Manage running tasks", "\nUsage: cc2_job <list/kill> (PID/all)\n\tcc2_job linux list\n\tcc2_job kill 222\n\tcc2_job kill all\n");


sub openJobDialog {
    local('$bid $dialog');
    foreach $bid($1) {
        if ($2[0] eq "list") {
            cc2_job($bid, "list");
        } else if ($2[1] eq "all") {
            cc2_job($bid, "kill", "all");
        } else {
            prompt_text("Kill PID", "<PID>", lambda({
                cc2_job($bid, "kill", "$1");
            }, $bid => $bid));
        }
    }
}


sub cc2_job_status {
    local('$bid $os $arch $system');
    $bid = $1;
    $os = lc(beacon_info($bid, "os"));
    $arch = beacon_info($bid, "arch");
    if ('linux' isin $os) {
        if ($arch eq 'x86') {
            return 'Linux32';
        } else if ($arch eq 'x64') {
            return 'Linux64';
        }
    } else if ('macos' isin $os) {
        return 'MacOS(intel)';
    }
    return '';
}